
interface MacroFunction
{
    void call(String[] tokens, ArrayList<String> stack, ArrayList<String> registers);
}

class Macro {

    private String[] keywords;
    private MacroFunction[] functions;

    public Macro(String[] keywords, MacroFunction[] functions) {  
        this.keywords = keywords;
        this.functions = functions; 
    }  

    public void parse(String[] program) {
        ArrayList<String> stack = new ArrayList<String>();
        ArrayList<String> registers = new ArrayList<String>();

        for (int k = 0; k < program.length; k++) {
            String[] tokens = program[k].split(", ");

            for (int j = 0; j < tokens.length; j++) {
                tokens[j] = tokens[j].trim().replace("\n", "").replace("\"", "");
            }

            for (int i = 0; i < keywords.length; i++) {
                if (tokens[0].trim().equals(keywords[i])) {
                    functions[i].call(tokens, stack, registers);
                }
            }
        }
    }
}